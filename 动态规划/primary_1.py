# 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
#
# 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
#
# 注意：给定 n 是一个正整数。
#
# 示例 1：
#
# 输入： 2
# 输出： 2
# 解释： 有两种方法可以爬到楼顶。
# 1.  1 阶 + 1 阶
# 2.  2 阶
# 示例 2：
#
# 输入： 3
# 输出： 3
# 解释： 有三种方法可以爬到楼顶。
# 1.  1 阶 + 1 阶 + 1 阶
# 2.  1 阶 + 2 阶
# 3.  2 阶 + 1 阶


"""
自评：典型的动态规划问题，可以自底向上合成最终问题。
因为每次只能爬两层，所以N层对应的前一步可能是从n-2爬上来的，也可能是从n-1爬上来的。
对应数学问题就是f(n) = f(n-2) + f(n-1)
"""

class Solution:
    def climbStairs(self, n: int):
        f = [0,1,2]
        if n == 0:
            return f[0]
        elif n == 1:
            return f[1]
        elif n == 2:
            return f[2]
        else:
            for i in range(3, n):
                f.append(f[i-2] + f[i-1])

        return f[n-1]

